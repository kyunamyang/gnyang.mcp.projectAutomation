using gnyang.mcp.projectAutomation.Db;
using gnyang.mcp.projectAutomation.Models;
using gnyang.mcp.projectAutomation.ViewModels;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace gnyang.mcp.projectAutomation.CodeWriter
{
    internal class EntityWriter
    {
        string defaultNamespace = string.Empty;
        Dictionary<string, string> typeDictionary = new Dictionary<string, string>();
        string[] defaultUsing = { "System", "System.Collections.Generic", "System.Linq", "System.Text", "System.Threading.Tasks" };
        string comment_class = "// This code was generated by gnyang.mcp.projectAutomation";
        
        bool useKeyword = true;

        public EntityWriter()
        {
            // https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql-server-data-type-mappings
            if (useKeyword)
            {
                typeDictionary.Add("bigint", "long");
                typeDictionary.Add("binary", "byte[]");
                typeDictionary.Add("bit", "bool");
                typeDictionary.Add("char", "string");
                typeDictionary.Add("date", "DateTime");
                typeDictionary.Add("datetime", "DateTime");
                typeDictionary.Add("datetime2", "DateTime");
                typeDictionary.Add("datetimeoffset", "DateTimeOffset");
                typeDictionary.Add("decimal", "decimal");
                typeDictionary.Add("float", "double");
                typeDictionary.Add("image", "byte[]");
                typeDictionary.Add("int", "int");
                typeDictionary.Add("money", "decimal");
                typeDictionary.Add("nchar", "string");
                typeDictionary.Add("ntext", "string");
                typeDictionary.Add("numeric", "decimal");
                typeDictionary.Add("nvarchar", "string");
                typeDictionary.Add("real", "float");
                typeDictionary.Add("rowversion", "byte[]");
                typeDictionary.Add("smalldatetime", "DateTime");
                typeDictionary.Add("smallint", "short");
                typeDictionary.Add("smallmoney", "decimal");
                typeDictionary.Add("sql_variant", "object");
                typeDictionary.Add("text", "string");
                typeDictionary.Add("time", "TimeSpan");
                typeDictionary.Add("timestamp", "byte[]");
                typeDictionary.Add("tinyint", "byte");
                typeDictionary.Add("uniqueidentifier", "Guid");
                typeDictionary.Add("varbinary", "byte[]");
                typeDictionary.Add("varchar", "string");
                typeDictionary.Add("xml", "Xml");
            }
            else
            {
                typeDictionary.Add("bigint", "Int64");
                typeDictionary.Add("binary", "Byte[]");
                typeDictionary.Add("bit", "Boolean");
                typeDictionary.Add("char", "String");
                typeDictionary.Add("date", "DateTime");
                typeDictionary.Add("datetime", "DateTime");
                typeDictionary.Add("datetime2", "DateTime");
                typeDictionary.Add("datetimeoffset", "DateTimeOffset");
                typeDictionary.Add("decimal", "Decimal");
                typeDictionary.Add("float", "Double");
                typeDictionary.Add("image", "Byte[]");
                typeDictionary.Add("int", "Int32");
                typeDictionary.Add("money", "Decimal");
                typeDictionary.Add("nchar", "String");
                typeDictionary.Add("ntext", "String");
                typeDictionary.Add("numeric", "Decimal");
                typeDictionary.Add("nvarchar", "String");
                typeDictionary.Add("real", "Single");
                typeDictionary.Add("rowversion", "Byte[]");
                typeDictionary.Add("smalldatetime", "DateTime");
                typeDictionary.Add("smallint", "Int16");
                typeDictionary.Add("smallmoney", "Decimal");
                typeDictionary.Add("sql_variant", "Object");
                typeDictionary.Add("text", "String");
                typeDictionary.Add("time", "TimeSpan");
                typeDictionary.Add("timestamp", "Byte[]");
                typeDictionary.Add("tinyint", "Byte");
                typeDictionary.Add("uniqueidentifier", "Guid");
                typeDictionary.Add("varbinary", "Byte[]");
                typeDictionary.Add("varchar", "String");
                typeDictionary.Add("xml", "Xml");
            }

        }

        public EntityWriter(string d) : this()
        {
            defaultNamespace = d;
        }

        private string GetTypeName(string dbTypeName)
        {
            typeDictionary.TryGetValue(dbTypeName, out var typeName);

            if (typeName == null)
            {
                typeName = "string";
            }

            return typeName;
        }

        public List<SourceFileInfo> WriteEntity(DbReader reader)
        {
            List<SourceFileInfo> result = new List<SourceFileInfo>();

            StringBuilder sb = new StringBuilder();

            foreach (var table in reader.TableViewModelList)
            {
                sb.AppendLine(comment_class);
                sb.AppendLine(GetClassDifinition(table));
                sb.AppendLine(string.Empty);

                result.Add(new SourceFileInfo
                {
                    FolderName = table.TABLE_SCHEMA,
                    Name = table.TABLE_NAME,
                    Contents = sb.ToString(),
                });
                sb.Clear();
            }

            return result;
        }

        public string GetClassDifinition(TableViewModel t)
        {
            CompilationUnitSyntax syntaxFactory = SyntaxFactory.CompilationUnit();

            // using   
            foreach (var a in defaultUsing)
            {
                string b = a.Trim();
                if (b.Length > 0)
                    syntaxFactory = syntaxFactory.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(b)));
            }

            // class
            var cds = SyntaxFactory.ClassDeclaration(t.TABLE_NAME)
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));

            var propertyDeclarations = new List<MemberDeclarationSyntax>();

            foreach (var c in t.ColumnViewModelList)
            {
                string type = GetTypeName(c.DATA_TYPE);
                string name = c.COLUMN_NAME;

                var propertyDeclaration = SyntaxFactory.PropertyDeclaration(SyntaxFactory.ParseTypeName(type), name)
                    .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                    .AddAccessorListAccessors(SyntaxFactory.AccessorDeclaration(SyntaxKind.GetAccessorDeclaration).WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken)))
                    .AddAccessorListAccessors(SyntaxFactory.AccessorDeclaration(SyntaxKind.SetAccessorDeclaration).WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken)));

                if (type == "string" || type == "String")
                {
                    // 정상 동작함 : string.Empty 대신에 빈 문자열 "" 사용하려면
                    // propertyDeclaration = propertyDeclaration.WithInitializer(
                    //     SyntaxFactory.EqualsValueClause(
                    //         SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression, SyntaxFactory.Literal(""))
                    //     )
                    // )
                    // .WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken));
                    //
                    propertyDeclaration = propertyDeclaration.WithInitializer(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.ParseToken("="), SyntaxFactory.ParseExpression("string.Empty")
                        )
                    )
                    .WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken));

                }

                propertyDeclarations.Add(propertyDeclaration);
            }

            cds = cds.AddMembers(propertyDeclarations.ToArray());

            // namespace
            //var namespaceDeclaration = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(t.TABLE_SCHEMA)).NormalizeWhitespace();
            // defaultNamespace
            var namespaceDeclaration = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(defaultNamespace + "." + t.TABLE_SCHEMA)).NormalizeWhitespace();
            namespaceDeclaration = namespaceDeclaration.AddMembers(cds);
            syntaxFactory = syntaxFactory.AddMembers(namespaceDeclaration);

            return syntaxFactory.NormalizeWhitespace().ToFullString();
        }
    }
}
